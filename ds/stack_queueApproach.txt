
Stack in Data Structures

A stack is a linear data structure that follows the LIFO (Last In, First Out) principle. This means that the last element added is the first one to be removed, similar to a stack of plates.

---

Stack Approach in Java

Java provides a built-in `Stack` class in the `java.util` package, which allows stack operations like push, pop, and peek.


Basic Syntax:
java
import java.util.*;

public class StackExample {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>(); // Creating a stack
        
        stack.push(10); // Push (Insertion)
        stack.push(20);
        stack.push(30);
        
        System.out.println("Stack: " + stack);
        
        System.out.println("Top element: " + stack.peek()); // Peek (Top element)
        
        stack.pop(); // Pop (Deletion)
        System.out.println("After Pop: " + stack);
    }
}


---

Explanation of Syntax
1. `Stack<Integer> stack = new Stack<>();` – Creates a stack.
2. `stack.push(10);` – Pushes elements onto the stack.
3. `stack.peek();` – Returns the top element without removing it.
4. `stack.pop();` – Removes the top element from the stack.
5. Printing the stack – Shows the elements in LIFO order.

---

Output of the Above Code

Stack: [10, 20, 30]
Top element: 30
After Pop: [10, 20]


Using Java’s built-in `Stack` class makes implementation simple and efficient!

---

Queue in Data Structures

A queue is a linear data structure that follows the FIFO (First In, First Out) principle. This means that the element added first is the first one to be removed, similar to a real-life queue (like a line at a ticket counter).

---

Queue Syntax in Java

Java provides a built-in `Queue` interface in the `java.util` package, which is implemented by classes like `LinkedList` and `PriorityQueue`.


Basic Syntax:
java
import java.util.*;

public class QueueExample {
    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>(); // Creating a queue
        
        queue.add(10); // Enqueue (Insertion)
        queue.add(20);
        queue.add(30);
        
        System.out.println("Queue: " + queue);
        
        System.out.println("Front element: " + queue.peek()); // Peek (Front element)
        
        queue.remove(); // Dequeue (Deletion)
        System.out.println("After Dequeue: " + queue);
    }
}


---

Explanation of Syntax
1. `Queue<Integer> queue = new LinkedList<>();` – Creates a queue using `LinkedList`.
2. `queue.add(10);` – Adds elements to the queue.
3. `queue.peek();` – Returns the front element without removing it.
4. `queue.remove();` – Removes the front element from the queue.
5. Printing the queue – Shows the elements in FIFO order.

---

Output of the Above Code

Queue: [10, 20, 30]
Front element: 10
After Dequeue: [20, 30]


Using Java’s built-in `Queue` makes implementation simple and efficient!

